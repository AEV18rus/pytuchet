import { NextRequest, NextResponse } from 'next/server';
import crypto from 'crypto';
import { getUserByTelegramId, createUser, updateUser } from '@/lib/db';
import { AuthenticatedUser } from '@/lib/auth-server';
import { addLog } from '@/lib/logging';
import { validate, validate3rd } from '@tma.js/init-data-node';

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram –ø–æ–¥–ø–∏—Å–∏
function hmac(hexKey: Buffer, s: string) {
  return crypto.createHmac('sha256', hexKey).update(s).digest('hex');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è bot_id –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
function getBotIdFromToken(botToken: string): number {
  const botId = botToken.split(':')[0];
  return parseInt(botId, 10);
}

function buildDataCheck(params: URLSearchParams, includeQueryId: boolean) {
  const p = new URLSearchParams(params.toString()); // –∫–æ–ø–∏—è
  p.delete('hash');
  p.delete('signature');
  if (!includeQueryId) p.delete('query_id');

  // –í–ê–ñ–ù–û: –Ω–∏–∫–∞–∫–∏—Ö –ª–∏—à–Ω–∏—Ö \n –≤ –∫–æ–Ω—Ü–µ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –∫–ª—é—á—É
  const entries = Array.from(p.entries()).sort(([a], [b]) => a.localeCompare(b));
  return entries.map(([k, v]) => `${k}=${v}`).join('\n');
}

function debugTelegramSignature(initDataRaw: string, botTokenRaw: string, expected: string) {
  const initData = typeof initDataRaw === 'string' ? initDataRaw : String(initDataRaw);
  const botToken = botTokenRaw.trim();

  addLog('info', 'üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê Telegram –ø–æ–¥–ø–∏—Å–∏', {
    expected: expected,
    botTokenLength: botToken.length,
    initDataLength: initData.length
  });

  const params = new URLSearchParams(initData);
  const hasSignature = params.has('signature');
  const hasHash = params.has('hash');
  
  addLog('info', 'üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ debug', { 
    hasSignature, 
    hasHash,
    mode: hasSignature ? 'validate3rd (–Ω–æ–≤—ã–π)' : 'validate (—Å—Ç–∞—Ä—ã–π)'
  });

  let validationResult = false;
  let errorMessage = '';

  try {
    if (hasSignature) {
      // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º validate3rd —Å bot_id
      const botId = getBotIdFromToken(botToken);
      validate3rd(initData, botId);
      validationResult = true;
      addLog('info', '‚úÖ DEBUG: validate3rd —É—Å–ø–µ—à–Ω–æ', { botId });
    } else {
      // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º validate —Å bot token
      validate(initData, botToken);
      validationResult = true;
      addLog('info', '‚úÖ DEBUG: validate —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    validationResult = false;
    errorMessage = error instanceof Error ? error.message : String(error);
    addLog('info', '‚ùå DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏', { error: errorMessage });
  }

  addLog('info', 'üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏', {
    validationResult,
    errorMessage,
    hasSignature,
    hasHash,
    expected
  });

  console.log('‚Äî Telegram auth debug (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞) ‚Äî');
  console.log('expected hash:', expected);
  console.log('validation result:', validationResult ? '‚úÖ VALID' : '‚ùå INVALID');
  if (errorMessage) {
    console.log('error:', errorMessage);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram initData
function verifyTelegramWebAppData(initData: string, botToken: string): any {
  // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  addLog('info', 'üßæ RAW initData FULL STRING', { initData: initData });
  
  const params = new URLSearchParams(initData);
  addLog('info', 'üîë ALL KEYS from initData', { keys: Array.from(params.keys()) });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ signature –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
  const hasSignature = params.has('signature');
  const hasHash = params.has('hash');
  
  addLog('info', 'üîç –†–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏', { 
    hasSignature, 
    hasHash,
    mode: hasSignature ? 'validate3rd (–Ω–æ–≤—ã–π)' : 'validate (—Å—Ç–∞—Ä—ã–π)'
  });
  
  try {
    if (hasSignature) {
      // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º validate3rd —Å bot_id
      const botId = getBotIdFromToken(botToken);
      addLog('info', 'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ–º validate3rd', { botId });
      
      // validate3rd –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
      validate3rd(initData, botId);
      
      addLog('info', '‚úÖ validate3rd —É—Å–ø–µ—à–Ω–æ');
    } else {
      // –°—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º validate —Å bot token
      addLog('info', 'üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º validate (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)');
      
      // validate –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
      validate(initData, botToken);
      
      addLog('info', '‚úÖ validate —É—Å–ø–µ—à–Ω–æ');
    }
  } catch (error) {
    addLog('error', '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ Telegram', {
      error: error instanceof Error ? error.message : String(error),
      hasSignature,
      hasHash,
      initDataLength: initData.length
    });
    
    throw new Error('Invalid signature');
  }
  
  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userParam = params.get('user');
  if (!userParam) {
    throw new Error('User data not found');
  }

  let userData;
  try {
    userData = JSON.parse(userParam);
  } catch (parseError) {
    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    try {
      userData = JSON.parse(decodeURIComponent(userParam));
    } catch (secondParseError) {
      throw new Error('Failed to parse user data');
    }
  }

  return userData;
}

export async function POST(request: NextRequest) {
  try {
    // üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const requestIP = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';
    const timestamp = new Date().toISOString();
    
    console.log('üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
    console.log('Request IP:', requestIP);
    console.log('User agent:', userAgent);
    console.log('Timestamp:', timestamp);
    
    const body = await request.json();
    const { initData } = body;

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    addLog('info', '–ù–∞—á–∞–ª–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram', {
      hasInitData: !!initData,
      initDataType: typeof initData,
      initDataLength: initData ? initData.length : 0,
      hasBotToken: !!process.env.TELEGRAM_BOT_TOKEN,
      userAgent,
      ip: requestIP,
      timestamp
    });
    
    if (!initData) {
      console.log('Auth failed: initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      addLog('error', '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: initData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', {
        requestBody: body,
        ip: requestIP,
        userAgent,
        timestamp
      });
      return NextResponse.json(
        { error: 'initData is required' },
        { status: 400 }
      );
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const botToken = process.env.TELEGRAM_BOT_TOKEN?.trim();
    if (!botToken) {
      console.log('Auth failed: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
    
    console.log('Token ends with:', JSON.stringify(botToken.slice(-3)));
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞ Telegram (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 123456789:ABC-DEF1234ghIkl-zyx57W2v1u123ew11)
    if (!/^\d+:[\w-]{35}$/.test(botToken)) {
      addLog('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TELEGRAM_BOT_TOKEN', { 
        tokenLength: botToken.length,
        tokenFormat: botToken.replace(/:.+/, ':***') 
      });
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
    }
    
    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    const allParams = new URLSearchParams(initData);
    const expectedHash = allParams.get('hash') || '';
    console.log('üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –ø–æ–¥–ø–∏—Å–∏...');
    debugTelegramSignature(initData, botToken, expectedHash);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
    let userData;
    try {
      addLog('info', 'üîê –í—ã–∑—ã–≤–∞–µ–º verifyTelegramWebAppData', { initDataLength: initData.length });
      userData = verifyTelegramWebAppData(initData, botToken);
      // –õ–æ–≥–∏—Ä—É–µ–º userData –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (photo_url)
      const { photo_url, ...safeUserData } = userData;
      addLog('info', '‚úÖ verifyTelegramWebAppData —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', { userData: safeUserData });
    } catch (error) {
      console.log('Auth failed:', error instanceof Error ? error.message : 'Unknown error');
      return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram' }, { status: 401 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    let user = await getUserByTelegramId(userData.id);
    
    if (user) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram, –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      // –ù–ï –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ–º display_name –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const needsUpdate = 
        user.first_name !== userData.first_name ||
        user.last_name !== userData.last_name ||
        user.username !== userData.username;
      
      if (needsUpdate) {
        const updatedUser = await updateUser(userData.id, {
          first_name: userData.first_name,
          last_name: userData.last_name,
          username: userData.username
          // display_name –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º
        });
        user = updatedUser;
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      user = await createUser({
        telegram_id: userData.id,
        first_name: userData.first_name,
        last_name: userData.last_name,
        username: userData.username
        // display_name –±—É–¥–µ—Ç null –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      });
    }
    
    console.log('Auth success for user:', user.telegram_id);
    
    addLog('info', '–£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Telegram', {
      userId: user.id,
      telegramId: user.telegram_id,
      username: user.username,
      ip: requestIP,
      userAgent,
      timestamp
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return NextResponse.json({
      success: true,
      user: {
        id: user.id,
        telegram_id: user.telegram_id,
        first_name: user.first_name,
        last_name: user.last_name,
        username: user.username,
        display_name: user.display_name,
        created_at: user.created_at,
        updated_at: user.updated_at
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    
    addLog('error', '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram', {
      error: error instanceof Error ? error.message : String(error),
      stack: error instanceof Error ? error.stack : undefined
    });
    
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }, { status: 405 });
}