// –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram WebHook
// –ó–∞–ø—É—Å–∫: node scripts/setup-telegram-webhook.js

const dotenv = require('dotenv');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: '.env.local' });

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const WEBHOOK_URL = process.env.VERCEL_URL || 'https://pytuchet.vercel.app';

if (!BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
  process.exit(1);
}

async function setWebhook() {
  const webhookUrl = `${WEBHOOK_URL}/api/telegram-webhook`;
  
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebHook...');
  console.log('üìç URL:', webhookUrl);
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: webhookUrl,
        allowed_updates: ['message'],
      }),
    });

    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ WebHook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!');
      console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.description);
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebHook:', result.description);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }
}

async function getWebhookInfo() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ WebHook...');
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`);
    const result = await response.json();
    
    if (result.ok) {
      console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebHook:');
      console.log('   URL:', result.result.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('   –°—Ç–∞—Ç—É—Å:', result.result.has_custom_certificate ? '–° —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º' : '–ë–µ–∑ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞');
      console.log('   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', result.result.pending_update_count);
      
      if (result.result.last_error_date) {
        console.log('   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:', new Date(result.result.last_error_date * 1000).toLocaleString());
        console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', result.result.last_error_message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
  }
}

async function deleteWebhook() {
  console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ WebHook...');
  
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`);
    const result = await response.json();
    
    if (result.ok) {
      console.log('‚úÖ WebHook —É–¥–∞–ª–µ–Ω!');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è WebHook:', result.description);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'set':
      await setWebhook();
      break;
    case 'info':
      await getWebhookInfo();
      break;
    case 'delete':
      await deleteWebhook();
      break;
    default:
      console.log('üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('   npx ts-node scripts/setup-telegram-webhook.ts set    - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å WebHook');
      console.log('   npx ts-node scripts/setup-telegram-webhook.ts info   - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ WebHook');
      console.log('   npx ts-node scripts/setup-telegram-webhook.ts delete - –£–¥–∞–ª–∏—Ç—å WebHook');
      break;
  }
}

main().catch(console.error);