const { sql } = require('@vercel/postgres');

async function initVercelPostgres() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vercel Postgres...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã shifts
    console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã shifts...');
    await sql`
      CREATE TABLE IF NOT EXISTS shifts (
        id SERIAL PRIMARY KEY,
        date TEXT NOT NULL,
        hours REAL NOT NULL,
        steam_bath INTEGER NOT NULL DEFAULT 0,
        brand_steam INTEGER NOT NULL DEFAULT 0,
        intro_steam INTEGER NOT NULL DEFAULT 0,
        scrubbing INTEGER NOT NULL DEFAULT 0,
        masters INTEGER NOT NULL DEFAULT 1,
        total REAL NOT NULL,
        hourly_rate REAL NOT NULL,
        steam_bath_price REAL NOT NULL,
        brand_steam_price REAL NOT NULL,
        intro_steam_price REAL NOT NULL,
        scrubbing_price REAL NOT NULL
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ shifts —Å–æ–∑–¥–∞–Ω–∞');

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã prices
    console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã prices...');
    await sql`
      CREATE TABLE IF NOT EXISTS prices (
        id SERIAL PRIMARY KEY,
        name TEXT NOT NULL UNIQUE,
        price REAL NOT NULL
      )
    `;
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ prices —Å–æ–∑–¥–∞–Ω–∞');

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
    console.log('üíµ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω...');
    const defaultPrices = [
      { name: '–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞', price: 400 },
      { name: '–ü—É—Ç–µ–≤–æ–µ –ø–∞—Ä–µ–Ω–∏–µ', price: 3500 },
      { name: '–§–∏—Ä–º–µ–Ω–Ω–æ–µ –ø–∞—Ä–µ–Ω–∏–µ', price: 4200 },
      { name: '–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∞—Ä–µ–Ω–∏–µ', price: 2500 },
      { name: '–°–∫—Ä–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ', price: 1200 }
    ];

    for (const price of defaultPrices) {
      await sql`
        INSERT INTO prices (name, price) 
        VALUES (${price.name}, ${price.price}) 
        ON CONFLICT (name) DO NOTHING
      `;
    }
    console.log('‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    const tablesResult = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    
    console.log('üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tablesResult.rows.forEach(row => {
      console.log(`  - ${row.table_name}`);
    });

    const pricesResult = await sql`SELECT COUNT(*) as count FROM prices`;
    const shiftsResult = await sql`SELECT COUNT(*) as count FROM shifts`;
    
    console.log(`üí∞ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω: ${pricesResult.rows[0].count}`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω: ${shiftsResult.rows[0].count}`);
    
    console.log('üéâ Vercel Postgres —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vercel Postgres:', error);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è POSTGRES_* –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ Vercel');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Vercel Postgres –¥–æ–±–∞–≤–ª–µ–Ω –∫ –ø—Ä–æ–µ–∫—Ç—É');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  initVercelPostgres();
}

module.exports = { initVercelPostgres };