import { NextRequest, NextResponse } from 'next/server';
import { 
  createPayout, 
  createPayoutWithCorrection,
  getPayoutsByUser, 
  getPayoutsByUserAndMonth,
  getMonthsWithShifts,
  getEarningsForMonth,
  getPayoutsForMonth,
  getUserByTelegramId,
  getPayoutsDataOptimized,
  getMonthStatus,
  processOverpaymentCarryover
} from '@/lib/db';
import { getUserFromRequest } from '@/lib/auth-server';
import { ensureDatabaseInitialized } from '@/lib/global-init';

// GET /api/payouts - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
export async function GET(request: NextRequest) {
  try {
    await ensureDatabaseInitialized();
    
    const user = await getUserFromRequest(request);
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const monthsData = await getPayoutsDataOptimized(user.id!);

    return NextResponse.json({ months: monthsData });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// POST /api/payouts - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤—ã–ø–ª–∞—Ç—É
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã...');
    await ensureDatabaseInitialized();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    
    const user = await getUserFromRequest(request);
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user);
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

  const body = await request.json();
  const { month, amount, date, comment } = body;
  console.log('üìù –î–∞–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã:', { month, amount, date, comment });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!month || !amount || !date) {
      return NextResponse.json({ 
        error: '–ú–µ—Å—è—Ü, —Å—É–º–º–∞ –∏ –¥–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      }, { status: 400 });
    }

    if (amount <= 0) {
      return NextResponse.json({ 
        error: '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
      }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –º–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç?
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ—Å—è—Ü–∞:', month);
    const isClosed = await getMonthStatus(month);
    console.log('üìÖ –°—Ç–∞—Ç—É—Å –º–µ—Å—è—Ü–∞:', isClosed);
    if (isClosed) {
      return NextResponse.json({ 
        error: '–ú–µ—Å—è—Ü –∑–∞–∫—Ä—ã—Ç, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–æ' 
      }, { status: 403 });
    }

    // –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
    console.log('üí∞ –°–æ–∑–¥–∞–µ–º –≤—ã–ø–ª–∞—Ç—É —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π...');
    const result = await createPayoutWithCorrection({
      user_id: user.id!,
      month,
      amount: parseFloat(amount),
      date,
      comment: comment || ''
    });
    console.log('‚úÖ –í—ã–ø–ª–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞:', result.payout);
    
    if (result.overpayment) {
      console.log(`üîÑ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ ${result.overpayment} ‚ÇΩ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü`);
    }

    return NextResponse.json({ 
      payout: result.payout,
      overpayment: result.overpayment 
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}