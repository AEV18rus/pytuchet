import { NextRequest, NextResponse } from 'next/server';

// Telegram Bot API types
interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
  };
}

interface TelegramMessage {
  chat_id: number;
  text: string;
  reply_markup?: {
    inline_keyboard: Array<Array<{
      text: string;
      web_app?: { url: string };
      url?: string;
    }>>;
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API
async function sendTelegramMessage(message: TelegramMessage) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(message),
  });

  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.statusText}`);
  }

  return response.json();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(chatId: number, firstName: string) {
  const message: TelegramMessage = {
    chat_id: chatId,
    text: `–ü—Ä–∏–≤–µ—Ç, ${firstName}! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω –ü—É—Ç—ë–≤–æ–π —É—á—ë—Ç!\n\nüîπ –í–µ–¥–∏—Ç–µ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Å–º–µ–Ω\nüîπ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–∞—Ä–∞–±–æ—Ç–æ–∫\nüîπ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`,
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: 'https://pytuchet.vercel.app/' }
        }
      ]]
    }
  };

  return sendTelegramMessage(message);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async function handleHelpCommand(chatId: number) {
  const message: TelegramMessage = {
    chat_id: chatId,
    text: `üìã –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\nüî∏ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\nüî∏ /app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\nüî∏ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n‚Ä¢ –£—á–µ—Ç —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω\n‚Ä¢ –†–∞—Å—á–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ —É—Å–ª—É–≥\n\n–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞–∂–º–∏—Ç–µ /app –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ".`,
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: 'https://pytuchet.vercel.app/' }
        }
      ]]
    }
  };

  return sendTelegramMessage(message);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /app
async function handleAppCommand(chatId: number) {
  const message: TelegramMessage = {
    chat_id: chatId,
    text: `üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–∏—Ö —Å–º–µ–Ω.`,
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ü—É—Ç—ë–≤–æ–π —É—á—ë—Ç',
          web_app: { url: 'https://pytuchet.vercel.app/' }
        }
      ]]
    }
  };

  return sendTelegramMessage(message);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async function handleUnknownMessage(chatId: number) {
  const message: TelegramMessage = {
    chat_id: chatId,
    text: `‚ùì –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\nüî∏ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\nüî∏ /help - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\nüî∏ /app - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`,
    reply_markup: {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
          web_app: { url: 'https://pytuchet.vercel.app/' }
        }
      ]]
    }
  };

  return sendTelegramMessage(message);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebHook
export async function POST(request: NextRequest) {
  try {
    const update: TelegramUpdate = await request.json();
    
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(update, null, 2));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (!update.message) {
      return NextResponse.json({ ok: true });
    }

    const { message } = update;
    const chatId = message.chat.id;
    const text = message.text;
    const firstName = message.from.first_name;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text) {
      if (text === '/start') {
        await handleStartCommand(chatId, firstName);
      } else if (text === '/help') {
        await handleHelpCommand(chatId);
      } else if (text === '/app') {
        await handleAppCommand(chatId);
      } else {
        await handleUnknownMessage(chatId);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebHook:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ GET –∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏)
export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram WebHook endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç',
    timestamp: new Date().toISOString()
  });
}