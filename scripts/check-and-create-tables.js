require('dotenv').config({ path: '.env.local' });
const { sql } = require('@vercel/postgres');

async function checkAndCreateTables() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const result = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `;
    
    console.log('üìã –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    result.rows.forEach(row => {
      console.log(`  - ${row.table_name}`);
    });
    
    const existingTables = result.rows.map(row => row.table_name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    if (!existingTables.includes('users')) {
      console.log('\n‚ö†Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users...');
      await sql`
        CREATE TABLE users (
          id SERIAL PRIMARY KEY,
          name TEXT NOT NULL,
          telegram_id TEXT UNIQUE,
          is_admin BOOLEAN DEFAULT false,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `;
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    if (!existingTables.includes('payouts')) {
      console.log('\n‚ö†Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É payouts...');
      await sql`
        CREATE TABLE payouts (
          id SERIAL PRIMARY KEY,
          master_name TEXT NOT NULL,
          month TEXT NOT NULL,
          amount REAL NOT NULL,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
      `;
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ payouts —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    if (!existingTables.includes('month_status')) {
      console.log('\n‚ö†Ô∏è  –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É month_status...');
      await sql`
        CREATE TABLE month_status (
          id SERIAL PRIMARY KEY,
          month TEXT NOT NULL UNIQUE,
          is_paid BOOLEAN NOT NULL DEFAULT false
        )
      `;
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ month_status —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    console.log('\nüéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

checkAndCreateTables();