// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
process.env.POSTGRES_URL = "postgresql://neondb_owner:npg_FuYknM4g3rji@ep-damp-queen-a4y4suae-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require";

const { getPayoutsDataOptimized, initDatabase } = require('../src/lib/db.ts');

async function testUICarryover() {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await initDatabase();
    
    const userId = 23; // ID —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–æ–≤:');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è UI
    const payoutsData = await getPayoutsDataOptimized(userId);
    
    console.log('\nüìã –î–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ    –ú–µ—Å—è—Ü    ‚îÇ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ  ‚îÇ –í—ã–ø–ª–∞—á–µ–Ω–æ   ‚îÇ  –û—Å—Ç–∞—Ç–æ–∫    ‚îÇ –ü—Ä–æ–≥—Ä–µ—Å—Å ‚îÇ   –°—Ç–∞—Ç—É—Å    ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    
    payoutsData.forEach(month => {
      const monthStr = month.month.padEnd(11);
      const earningsStr = `${month.earnings} ‚ÇΩ`.padEnd(11);
      const payoutsStr = `${month.total_payouts} ‚ÇΩ`.padEnd(11);
      const remainingStr = `${month.remaining} ‚ÇΩ`.padEnd(11);
      const progressStr = `${month.progress}%`.padEnd(8);
      const statusStr = month.status.padEnd(11);
      
      console.log(`‚îÇ ${monthStr} ‚îÇ ${earningsStr} ‚îÇ ${payoutsStr} ‚îÇ ${remainingStr} ‚îÇ ${progressStr} ‚îÇ ${statusStr} ‚îÇ`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–∫–∏
      if (month.total_payouts > month.earnings) {
        console.log(`‚îÇ ‚ùå –û–®–ò–ë–ö–ê: –í—ã–ø–ª–∞—á–µ–Ω–æ (${month.total_payouts}) > –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (${month.earnings}) ‚îÇ`);
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–ª–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã
      if (month.payouts && Array.isArray(month.payouts)) {
        const carryovers = month.payouts.filter(p => 
          p.comment && (p.comment.includes('–ü–µ—Ä–µ–Ω–æ—Å –≤') || p.comment.includes('–ü–µ—Ä–µ–Ω–æ—Å —Å'))
        );
        if (carryovers.length > 0) {
          console.log(`‚îÇ üìù –ü–µ—Ä–µ–Ω–æ—Å—ã –≤ ${month.month}:`);
          carryovers.forEach(carryover => {
            console.log(`‚îÇ    - ${carryover.amount} ‚ÇΩ: ${carryover.comment}`);
          });
        }
      }
    });
    
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤:');
    
    let allCorrect = true;
    
    payoutsData.forEach(month => {
      // –ü—Ä–∏–Ω—Ü–∏–ø 1: –í—ã–ø–ª–∞—á–µ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ
      if (month.total_payouts > month.earnings) {
        console.log(`‚ùå ${month.month}: –í—ã–ø–ª–∞—á–µ–Ω–æ (${month.total_payouts}) > –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (${month.earnings})`);
        allCorrect = false;
      } else {
        console.log(`‚úÖ ${month.month}: –í—ã–ø–ª–∞—á–µ–Ω–æ (${month.total_payouts}) ‚â§ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ (${month.earnings})`);
      }
      
      // –ü—Ä–∏–Ω—Ü–∏–ø 2: –û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
      const expectedRemaining = Math.max(0, month.earnings - month.total_payouts);
      if (month.remaining !== expectedRemaining) {
        console.log(`‚ùå ${month.month}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫. –û–∂–∏–¥–∞–µ—Ç—Å—è ${expectedRemaining}, –ø–æ–ª—É—á–µ–Ω–æ ${month.remaining}`);
        allCorrect = false;
      }
      
      // –ü—Ä–∏–Ω—Ü–∏–ø 3: –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω
      const expectedProgress = month.earnings > 0 ? Math.round((month.total_payouts / month.earnings) * 100) : 0;
      if (month.progress !== expectedProgress) {
        console.log(`‚ùå ${month.month}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –û–∂–∏–¥–∞–µ—Ç—Å—è ${expectedProgress}%, –ø–æ–ª—É—á–µ–Ω–æ ${month.progress}%`);
        allCorrect = false;
      }
    });
    
    if (allCorrect) {
      console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∏–∫–µ.');
    }
    
    console.log('\nüìä –°–≤–æ–¥–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:');
    const statusCounts = payoutsData.reduce((acc, month) => {
      acc[month.status] = (acc[month.status] || 0) + 1;
      return acc;
    }, {});
    
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`  ${status}: ${count} –º–µ—Å—è—Ü(–µ–≤)`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ UI:', error);
    throw error;
  }
}

testUICarryover()
  .then(() => {
    console.log('\n–¢–µ—Å—Ç UI –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('–¢–µ—Å—Ç UI –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  });