// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
process.env.POSTGRES_URL = "postgresql://neondb_owner:npg_FuYknM4g3rji@ep-damp-queen-a4y4suae-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require";

const { 
  createPayoutWithCorrection, 
  getPayoutsDataOptimized, 
  getEarningsForMonth,
  addShift,
  initDatabase,
  createUser,
  getUserByTelegramId,
  deletePayout,
  deleteShift,
  getPayoutsByUser,
  getShifts
} = require('../src/lib/db.ts');

async function testCorrectedPayoutLogic() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await initDatabase();
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    let user = await getUserByTelegramId(999999);
    if (!user) {
      user = await createUser({
        telegram_id: 999999,
        first_name: 'Test',
        last_name: 'User',
        username: 'testuser',
        display_name: 'Test User'
      });
    }
    const userId = user.id;
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å ID: ${userId}`);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingPayouts = await getPayoutsByUser(userId);
    for (const payout of existingPayouts) {
      await deletePayout(payout.id, userId);
    }
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingShifts = await getShifts(userId);
    for (const shift of existingShifts) {
      await deleteShift(shift.id, userId);
    }

    // –°–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('üìÖ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã...');
    
    // –Ø–Ω–≤–∞—Ä—å 2025: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 10,000 ‚ÇΩ
    await addShift({
      user_id: userId,
      date: '2025-01-15',
      hours: 8,
      steam_bath: 2,
      brand_steam: 1,
      intro_steam: 1,
      scrubbing: 0,
      zaparnik: 0,
      masters: 1,
      total: 10000,
      hourly_rate: 500,
      steam_bath_price: 3000,
      brand_steam_price: 4000,
      intro_steam_price: 2500,
      scrubbing_price: 2400,
      zaparnik_price: 1500
    });
    
    // –§–µ–≤—Ä–∞–ª—å 2025: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 3,000 ‚ÇΩ
    await addShift({
      user_id: userId,
      date: '2025-02-15',
      hours: 6,
      steam_bath: 1,
      brand_steam: 0,
      intro_steam: 0,
      scrubbing: 0,
      zaparnik: 0,
      masters: 0,
      total: 3000,
      hourly_rate: 500,
      steam_bath_price: 3000,
      brand_steam_price: 4000,
      intro_steam_price: 2500,
      scrubbing_price: 2400,
      zaparnik_price: 1500
    });
    
    // –ú–∞—Ä—Ç 2025: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 1,000 ‚ÇΩ
    await addShift({
      user_id: userId,
      date: '2025-03-15',
      hours: 2,
      steam_bath: 0,
      brand_steam: 0,
      intro_steam: 0,
      scrubbing: 0,
      zaparnik: 0,
      masters: 0,
      total: 1000,
      hourly_rate: 500,
      steam_bath_price: 3000,
      brand_steam_price: 4000,
      intro_steam_price: 2500,
      scrubbing_price: 2400,
      zaparnik_price: 1500
    });
    
    // –ê–ø—Ä–µ–ª—å 2025: –∑–∞—Ä–∞–±–æ—Ç–æ–∫ 5,000 ‚ÇΩ
    await addShift({
      user_id: userId,
      date: '2025-04-15',
      hours: 10,
      steam_bath: 0,
      brand_steam: 0,
      intro_steam: 0,
      scrubbing: 0,
      zaparnik: 0,
      masters: 0,
      total: 5000,
      hourly_rate: 500,
      steam_bath_price: 3000,
      brand_steam_price: 4000,
      intro_steam_price: 2500,
      scrubbing_price: 2400,
      zaparnik_price: 1500
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –≤—ã–ø–ª–∞—Ç...');
    
    // –Ø–Ω–≤–∞—Ä—å: –≤—ã–ø–ª–∞—Ç–∞ 15,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 10,000 ‚ÇΩ
    console.log('\nüìÖ –Ø–Ω–≤–∞—Ä—å 2025: –í—ã–ø–ª–∞—Ç–∞ 15,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 10,000 ‚ÇΩ');
    const jan_result = await createPayoutWithCorrection({
      user_id: userId,
      month: '2025-01',
      amount: 15000,
      date: '2025-01-31',
      comment: '–ë–æ–ª—å—à–∞—è –≤—ã–ø–ª–∞—Ç–∞'
    });
    
    console.log(`   üí∞ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É: ${jan_result.payout.amount} ‚ÇΩ`);
    console.log(`   üîÑ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${jan_result.overpayment || 0} ‚ÇΩ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —è–Ω–≤–∞—Ä—å
    const janEarnings = await getEarningsForMonth(userId, '2025-01');
    console.log(`   üìä –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ —è–Ω–≤–∞—Ä—å: ${janEarnings} ‚ÇΩ`);
    
    // –§–µ–≤—Ä–∞–ª—å: –≤—ã–ø–ª–∞—Ç–∞ 2,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 3,000 ‚ÇΩ + –ø–µ—Ä–µ–Ω–æ—Å 5,000 ‚ÇΩ
    console.log('\nüìÖ –§–µ–≤—Ä–∞–ª—å 2025: –í—ã–ø–ª–∞—Ç–∞ 2,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 3,000 ‚ÇΩ + –ø–µ—Ä–µ–Ω–æ—Å 5,000 ‚ÇΩ');
    const feb_result = await createPayoutWithCorrection({
      user_id: userId,
      month: '2025-02',
      amount: 2000,
      date: '2025-02-28',
      comment: '–û–±—ã—á–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞'
    });
    
    console.log(`   üí∞ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É: ${feb_result.payout.amount} ‚ÇΩ`);
    console.log(`   üîÑ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${feb_result.overpayment || 0} ‚ÇΩ`);
    
    // –ú–∞—Ä—Ç: –≤—ã–ø–ª–∞—Ç–∞ 3,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 1,000 ‚ÇΩ + –ø–µ—Ä–µ–Ω–æ—Å 2,000 ‚ÇΩ
    console.log('\nüìÖ –ú–∞—Ä—Ç 2025: –í—ã–ø–ª–∞—Ç–∞ 3,000 ‚ÇΩ –ø—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–µ 1,000 ‚ÇΩ + –ø–µ—Ä–µ–Ω–æ—Å 2,000 ‚ÇΩ');
    const mar_result = await createPayoutWithCorrection({
      user_id: userId,
      month: '2025-03',
      amount: 3000,
      date: '2025-03-31',
      comment: '–ï—â–µ –æ–¥–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞'
    });
    
    console.log(`   üí∞ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É: ${mar_result.payout.amount} ‚ÇΩ`);
    console.log(`   üîÑ –ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${mar_result.overpayment || 0} ‚ÇΩ`);

    // –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–µ—Å—è—Ü–∞–º:');
    const monthsData = await getPayoutsDataOptimized(userId);
    
    for (const monthData of monthsData) {
      if (['2025-01', '2025-02', '2025-03', '2025-04'].includes(monthData.month)) {
        console.log(`\nüìÖ ${monthData.month}:`);
        console.log(`   üíº –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${monthData.earnings} ‚ÇΩ`);
        console.log(`   üí∞ –í—ã–ø–ª–∞—á–µ–Ω–æ: ${monthData.total_payouts} ‚ÇΩ`);
        console.log(`   üìã –û—Å—Ç–∞—Ç–æ–∫: ${monthData.remaining} ‚ÇΩ`);
        console.log(`   üìù –í—ã–ø–ª–∞—Ç—ã:`);
        
        for (const payout of monthData.payouts) {
          console.log(`      - ${payout.amount} ‚ÇΩ (${payout.date}) ${payout.comment || ''}`);
        }
      }
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

testCorrectedPayoutLogic();