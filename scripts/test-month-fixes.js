const { sql } = require('@vercel/postgres');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
process.env.POSTGRES_URL = 'postgresql://neondb_owner:npg_Ey8Ey8Ey8Ey8Ey8Ey8Ey8Ey8Ey8Ey8@ep-weathered-darkness-a5aqhqzj.us-east-2.aws.neon.tech/neondb?sslmode=require';

async function testMonthFixes() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –º–µ—Å—è—Ü–µ–≤...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint /api/admin/months-with-shifts');
    const response = await fetch('http://localhost:3000/api/admin/months-with-shifts');
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('üìÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã:', data.months);
    } else {
      console.log('‚ùå API endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', response.statusText);
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    const monthsQuery = await sql`
      SELECT DISTINCT TO_CHAR(date, 'YYYY-MM') as month
      FROM shifts 
      ORDER BY month DESC
    `;
    console.log('üìä –ú–µ—Å—è—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', monthsQuery.rows.map(r => r.month));

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Aleksey)
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Aleksey');
    const alekseyShifts = await sql`
      SELECT u.first_name, u.last_name, s.date, TO_CHAR(s.date, 'YYYY-MM') as month
      FROM shifts s
      JOIN users u ON s.user_id = u.id
      WHERE u.first_name ILIKE '%aleksey%'
      ORDER BY s.date DESC
    `;
    
    if (alekseyShifts.rows.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–º–µ–Ω—ã –¥–ª—è Aleksey:');
      alekseyShifts.rows.forEach(shift => {
        console.log(`  - ${shift.date} (${shift.month})`);
      });
    } else {
      console.log('‚ùå –°–º–µ–Ω—ã –¥–ª—è Aleksey –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –æ–∫—Ç—è–±—Ä—è 2025');
    const reportsResponse = await fetch('http://localhost:3000/api/admin/reports?month=2025-10');
    if (reportsResponse.ok) {
      const reportsData = await reportsResponse.json();
      console.log('‚úÖ API –æ—Ç—á–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è 2025-10');
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${reportsData.length}`);
      
      // –ò—â–µ–º Aleksey –≤ –æ—Ç—á–µ—Ç–∞—Ö
      const alekseyReport = reportsData.find(r => 
        r.first_name && r.first_name.toLowerCase().includes('aleksey')
      );
      if (alekseyReport) {
        console.log('‚úÖ Aleksey –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–∞—Ö –æ–∫—Ç—è–±—Ä—è 2025:');
        console.log(`  - –ò–º—è: ${alekseyReport.first_name} ${alekseyReport.last_name || ''}`);
        console.log(`  - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${alekseyReport.earned || 0}`);
        console.log(`  - –í—ã–ø–ª–∞—á–µ–Ω–æ: ${alekseyReport.paid || 0}`);
      } else {
        console.log('‚ö†Ô∏è Aleksey –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç—á–µ—Ç–∞—Ö –æ–∫—Ç—è–±—Ä—è 2025');
      }
    } else {
      console.log('‚ùå API –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', reportsResponse.statusText);
    }

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å–º–µ–Ω –¥–ª—è Aleksey –≤ –æ–∫—Ç—è–±—Ä–µ 2025');
    const shiftsResponse = await fetch('http://localhost:3000/api/shifts?user_id=21&month=2025-10');
    if (shiftsResponse.ok) {
      const shiftsData = await shiftsResponse.json();
      console.log('‚úÖ API —Å–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è Aleksey –≤ 2025-10');
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ —Å–º–µ–Ω: ${shiftsData.length}`);
      
      if (shiftsData.length > 0) {
        shiftsData.forEach((shift, index) => {
          console.log(`  –°–º–µ–Ω–∞ ${index + 1}: ${shift.date}, —Å—É–º–º–∞: ${shift.total || 0}`);
        });
      }
    } else {
      console.log('‚ùå API —Å–º–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', shiftsResponse.statusText);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

testMonthFixes();